// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var MaterialUi_Grid = require("@jsiebern/bs-material-ui/src/MaterialUi_Grid.bs.js");
var Cell$ReactTemplate = require("./cell.bs.js");

var component = ReasonReact.reducerComponent("Board");

function make(width, height, mines, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var generateMineCoords = function (coordsList) {
                while(true) {
                  var row = Random.$$int(self[/* state */1][/* width */1]);
                  var col = Random.$$int(self[/* state */1][/* height */2]);
                  var match = List.exists((function(row,col){
                      return function (pair) {
                        return Caml_obj.caml_equal(pair, /* array */[
                                    row,
                                    col
                                  ]);
                      }
                      }(row,col)), coordsList);
                  if (match) {
                    continue ;
                  } else {
                    return /* array */[
                            row,
                            col
                          ];
                  }
                };
              };
              var generateRandomMineCoordsList = function (_randomMineCoordList, _currentMineCount, maxMineCount) {
                while(true) {
                  var currentMineCount = _currentMineCount;
                  var randomMineCoordList = _randomMineCoordList;
                  var match = currentMineCount < maxMineCount;
                  if (match) {
                    _currentMineCount = currentMineCount + 1 | 0;
                    _randomMineCoordList = List.append(randomMineCoordList, /* :: */[
                          generateMineCoords(randomMineCoordList),
                          /* [] */0
                        ]);
                    continue ;
                  } else {
                    return randomMineCoordList;
                  }
                };
              };
              var generatedMineCoords = generateRandomMineCoordsList(/* [] */0, 0, self[/* state */1][/* mines */3]);
              var onCellReveal = function (isBomb) {
                if (isBomb) {
                  Curry._1(self[/* send */3], /* UpdateGameState */[/* Lost */2]);
                  return undefined;
                } else {
                  return Random.$$int(6);
                }
              };
              var createColumn = function (_columns, _colIndex, rowIndex) {
                while(true) {
                  var colIndex = _colIndex;
                  var columns = _columns;
                  var match = colIndex < self[/* state */1][/* width */1];
                  if (match) {
                    _colIndex = colIndex + 1 | 0;
                    _columns = List.append(columns, /* :: */[
                          ReasonReact.element(undefined, undefined, Cell$ReactTemplate.make(onCellReveal, List.exists((function(colIndex){
                                      return function (coord) {
                                        return Caml_obj.caml_equal(coord, /* array */[
                                                    rowIndex,
                                                    colIndex
                                                  ]);
                                      }
                                      }(colIndex)), generatedMineCoords), /* array */[])),
                          /* [] */0
                        ]);
                    continue ;
                  } else {
                    return columns;
                  }
                };
              };
              var createRow = function (_rows, _rowIndex) {
                while(true) {
                  var rowIndex = _rowIndex;
                  var rows = _rows;
                  var match = rowIndex < self[/* state */1][/* height */2];
                  if (match) {
                    _rowIndex = rowIndex + 1 | 0;
                    _rows = List.append(rows, /* :: */[
                          createColumn(/* [] */0, 0, rowIndex),
                          /* [] */0
                        ]);
                    continue ;
                  } else {
                    return rows;
                  }
                };
              };
              return ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, undefined, /* Center */980392437, undefined, undefined, undefined, undefined, undefined, undefined, /* V12 */11, undefined, undefined, undefined, $$Array.of_list(List.map((function (rowCols) {
                                        return ReasonReact.element(undefined, undefined, MaterialUi_Grid.make(undefined, undefined, undefined, undefined, true, undefined, true, /* Center */980392437, undefined, undefined, undefined, undefined, undefined, undefined, /* V12 */11, undefined, undefined, undefined, $$Array.of_list(rowCols)));
                                      }), createRow(/* [] */0, 0)))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* gameState : NotPlayed */3,
                      /* width */width,
                      /* height */height,
                      /* mines */mines
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              return /* Update */Block.__(0, [/* record */[
                          /* gameState */action[0],
                          /* width */state[/* width */1],
                          /* height */state[/* height */2],
                          /* mines */state[/* mines */3]
                        ]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
