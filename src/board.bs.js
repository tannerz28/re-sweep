// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Cell$ReactTemplate = require("./cell.bs.js");

var component = ReasonReact.reducerComponent("Board");

function make(width, height, mines, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var createColumn = function (_columns, _colIndex) {
                while(true) {
                  var colIndex = _colIndex;
                  var columns = _columns;
                  var match = colIndex < self[/* state */1][/* width */1];
                  if (match) {
                    _colIndex = colIndex + 1 | 0;
                    _columns = List.append(columns, /* :: */[
                          ReasonReact.element(undefined, undefined, Cell$ReactTemplate.make(/* array */[])),
                          /* [] */0
                        ]);
                    continue ;
                  } else {
                    return columns;
                  }
                };
              };
              var createRow = function (_rows, _rowIndex) {
                while(true) {
                  var rowIndex = _rowIndex;
                  var rows = _rows;
                  var match = rowIndex < self[/* state */1][/* height */2];
                  if (match) {
                    _rowIndex = rowIndex + 1 | 0;
                    _rows = List.append(rows, /* :: */[
                          createColumn(/* [] */0, 0),
                          /* [] */0
                        ]);
                    continue ;
                  } else {
                    return rows;
                  }
                };
              };
              return ReactDOMRe.createElementVariadic("div", undefined, $$Array.of_list(List.map((function (rowCols) {
                                    return ReactDOMRe.createElementVariadic("div", undefined, $$Array.of_list(rowCols));
                                  }), createRow(/* [] */0, 0))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* gameState : NotPlayed */3,
                      /* width */width,
                      /* height */height,
                      /* mines */mines
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (_, state) {
              return /* Update */Block.__(0, [/* record */[
                          /* gameState : Playing */0,
                          /* width */state[/* width */1],
                          /* height */state[/* height */2],
                          /* mines */state[/* mines */3]
                        ]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
